//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AFarmWorkplace.WCFServer {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Product", Namespace="http://schemas.datacontract.org/2004/07/CommonLib")]
    [System.SerializableAttribute()]
    public partial class Product : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProductIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float ProductPriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int QuantityField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProductID {
            get {
                return this.ProductIDField;
            }
            set {
                if ((this.ProductIDField.Equals(value) != true)) {
                    this.ProductIDField = value;
                    this.RaisePropertyChanged("ProductID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductName {
            get {
                return this.ProductNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductNameField, value) != true)) {
                    this.ProductNameField = value;
                    this.RaisePropertyChanged("ProductName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float ProductPrice {
            get {
                return this.ProductPriceField;
            }
            set {
                if ((this.ProductPriceField.Equals(value) != true)) {
                    this.ProductPriceField = value;
                    this.RaisePropertyChanged("ProductPrice");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((this.QuantityField.Equals(value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WCFServer.IContract")]
    public interface IContract {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/TestServer", ReplyAction="http://tempuri.org/IContract/TestServerResponse")]
        void TestServer(string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/TestServer", ReplyAction="http://tempuri.org/IContract/TestServerResponse")]
        System.Threading.Tasks.Task TestServerAsync(string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/AddProducts", ReplyAction="http://tempuri.org/IContract/AddProductsResponse")]
        void AddProducts(System.Collections.Generic.List<AFarmWorkplace.WCFServer.Product> productList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/AddProducts", ReplyAction="http://tempuri.org/IContract/AddProductsResponse")]
        System.Threading.Tasks.Task AddProductsAsync(System.Collections.Generic.List<AFarmWorkplace.WCFServer.Product> productList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/FindProducts", ReplyAction="http://tempuri.org/IContract/FindProductsResponse")]
        System.Collections.Generic.List<AFarmWorkplace.WCFServer.Product> FindProducts(string substring);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/FindProducts", ReplyAction="http://tempuri.org/IContract/FindProductsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<AFarmWorkplace.WCFServer.Product>> FindProductsAsync(string substring);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/ProcessCheck", ReplyAction="http://tempuri.org/IContract/ProcessCheckResponse")]
        System.Collections.Generic.List<AFarmWorkplace.WCFServer.Product> ProcessCheck(System.Collections.Generic.List<AFarmWorkplace.WCFServer.Product> check);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/ProcessCheck", ReplyAction="http://tempuri.org/IContract/ProcessCheckResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<AFarmWorkplace.WCFServer.Product>> ProcessCheckAsync(System.Collections.Generic.List<AFarmWorkplace.WCFServer.Product> check);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IContractChannel : AFarmWorkplace.WCFServer.IContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ContractClient : System.ServiceModel.ClientBase<AFarmWorkplace.WCFServer.IContract>, AFarmWorkplace.WCFServer.IContract {
        
        public ContractClient() {
        }
        
        public ContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void TestServer(string message) {
            base.Channel.TestServer(message);
        }
        
        public System.Threading.Tasks.Task TestServerAsync(string message) {
            return base.Channel.TestServerAsync(message);
        }
        
        public void AddProducts(System.Collections.Generic.List<AFarmWorkplace.WCFServer.Product> productList) {
            base.Channel.AddProducts(productList);
        }
        
        public System.Threading.Tasks.Task AddProductsAsync(System.Collections.Generic.List<AFarmWorkplace.WCFServer.Product> productList) {
            return base.Channel.AddProductsAsync(productList);
        }
        
        public System.Collections.Generic.List<AFarmWorkplace.WCFServer.Product> FindProducts(string substring) {
            return base.Channel.FindProducts(substring);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<AFarmWorkplace.WCFServer.Product>> FindProductsAsync(string substring) {
            return base.Channel.FindProductsAsync(substring);
        }
        
        public System.Collections.Generic.List<AFarmWorkplace.WCFServer.Product> ProcessCheck(System.Collections.Generic.List<AFarmWorkplace.WCFServer.Product> check) {
            return base.Channel.ProcessCheck(check);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<AFarmWorkplace.WCFServer.Product>> ProcessCheckAsync(System.Collections.Generic.List<AFarmWorkplace.WCFServer.Product> check) {
            return base.Channel.ProcessCheckAsync(check);
        }
    }
}
